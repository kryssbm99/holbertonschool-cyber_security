#!/usr/bin/env ruby
# custom_port_scanner.rb
# A custom Metasploit auxiliary module to scan a range of TCP ports on target hosts.
# Place this file in: modules/auxiliary/scanner/custom_port_scanner.rb

require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Custom TCP Port Scanner',
      'Description'    => %q{
        This module scans a range of TCP ports on a target or list of targets
        and reports which ports are open.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RHOSTS(),
        OptPort.new('STARTPORT', [true, 'The first port to scan', 1]),
        OptPort.new('ENDPORT',   [true, 'The last port to scan', 1024]),
        OptInt.new('THREADS',    [true, 'Number of concurrent threads', 10])
      ]
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT'].to_i
    end_port   = datastore['ENDPORT'].to_i
    open_ports = []

    (start_port..end_port).each do |port|
      begin
        connect(false, { 'RHOST' => ip, 'RPORT' => port })
        print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
        open_ports << port
        disconnect
      rescue ::Rex::ConnectionError, ::Timeout::Error
        # closed or filtered, ignore
      end
    end

    if open_ports.any?
      print_status("#{ip} - Open ports on #{ip}: #{open_ports.join(', ')}")
    else
      print_status("#{ip} - No open ports found on #{ip}")
    end
  end
end